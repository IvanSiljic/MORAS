class Sphere {
    field int halfWidth, halfHeight;
    field int radius;
    field int sqrtRadius;
    field int rX, rY;
    field int resolution;
    field Trig trig;

    constructor Sphere new() {
        let sqrtRadius = 104;
        let radius = 100;
        let halfWidth = 256;
        let halfHeight = 128;
        let resolution = 2;

        do trig.init();

        return this;
    }

    method void draw() {
        var int i, j, iHeight, jWidth, i2, j2, a, t, px, py, pz, npy, npx, sin_rX, cos_rX, sin_rY, cos_rY, phi, u, v, uv;

        let sin_rX = trig.sin(rX);
        let cos_rX = trig.sin(90 - rX);
        let sin_rY = trig.sin(rY);
        let cos_rY = trig.sin(90 - rY);

        let i = -sqrtRadius;
        while (i < sqrtRadius) {
            let iHeight = i + halfHeight;
            do Screen.setColor(false);
            do Screen.drawRectangle(156, iHeight - resolution, 356, iHeight + resolution);
            do Screen.setColor(true);
            let i2 = i * i / 100;
            let j = -sqrtRadius;
            while (j < sqrtRadius) {
                let j2 = j * j / 100;
                if (~(i2 + j2 > radius)) {
                    let jWidth = j + halfWidth;

                    let a = i2 + j2;

                    if (a < 101) {
                        // Rjesenje kvadratne jednadzbe sto nam daje udaljenost najblize tocke
                        let t = Trig.getT(a);

                        let px = (t * j) / 100;
                        let py = (t * i) / 100;
                        let pz = -100 + t;

                        // rotating point on x-axis
                        let npy = ((cos_rY * py) / 100) - ((sin_rY * pz) / 100);
                        let pz = ((sin_rY * py) / 100) + ((cos_rY * pz) / 100);
                        let py = npy;

                        // rotating point on y-axis
                        let npx = ((cos_rX * px) / 100) + ((sin_rX * pz) / 100);
                        let pz = ((-sin_rX * px) / 100) + ((cos_rX * pz) / 100);
                        let px = npx;

                        let phi = trig.atan2(-pz, px) + 314;

                        let u = (phi * 25) / 157;
                        let v = trig.getV(-py);

                        let uv = (u / 5) + (v / 5);

                        if (uv - (uv / 2 * 2) = 0) {
                            do Screen.drawRectangle(jWidth - resolution, iHeight - resolution, jWidth + resolution, iHeight + resolution);
                        } else {
                            do Screen.drawRectangle(jWidth - resolution, iHeight, jWidth + resolution, iHeight);
                        }
                    }
                }
                let j = j + (resolution * 2);
            }
            let i = i + (resolution * 2);
        }
        return;
    }

    method void rotateX(int step) {
        let rX = rX + step;
        return;
    }

    method void rotateY(int step) {
        let rY = rY + step;
        return;
    }

    method void changeRes(int x) {
        if (resolution + x < 1) {
            return;
        }

        if (resolution + x > 5) {
            return;
        }

        let resolution = resolution + x;
        let sqrtRadius = 100 + (resolution * 2);
        return;
    }
    
    method int getRes() {
        return resolution;
    }

    method void dispose() {
        do trig.dispose();
        do Memory.deAlloc(this);

        return;
    }
}
